#!/bin/sh

# configent (https://github.com/raas-dev/configent)
# One command automated macOS/Linux laptop/VM/container bootstrapper.
#
# Copyright(C) 2016- Anssi SyrjÃ¤salo (http://a.syrjasalo.com)
# Licensed under GNU Lesser General Public License v3 (LGPL-3.0).

# shim for running `docker` in lima VM
: "${NAME:="default"}"
: "${TEMPLATE:="ubuntu"}"

# Query GitHub API for latest release tag
get_latest_github_release() {
  repo="$1"
  include_prerelease="${2:-false}"
  if [ "$include_prerelease" = "true" ]; then
    # Get first release from releases list (includes prereleases)
    api_url="https://api.github.com/repos/$repo/releases"
    if [ -n "$GITHUB_TOKEN" ]; then
      curl -fsSL -H "Authorization: token $GITHUB_TOKEN" "$api_url" 2>/dev/null |
        grep -o '"tag_name": "[^"]*"' |
        head -1 |
        cut -d '"' -f 4
    else
      curl -fsSL "$api_url" 2>/dev/null |
        grep -o '"tag_name": "[^"]*"' |
        head -1 |
        cut -d '"' -f 4
    fi
  else
    # Get latest stable release only
    api_url="https://api.github.com/repos/$repo/releases/latest"
    if [ -n "$GITHUB_TOKEN" ]; then
      curl -fsSL -H "Authorization: token $GITHUB_TOKEN" "$api_url" 2>/dev/null |
        grep -o '"tag_name": "[^"]*"' |
        head -1 |
        cut -d '"' -f 4
    else
      curl -fsSL "$api_url" 2>/dev/null |
        grep -o '"tag_name": "[^"]*"' |
        head -1 |
        cut -d '"' -f 4
    fi
  fi
}

install_docker_buildx_plugin() {
  if [ ! -x "$HOME/.docker/cli-plugins/docker-buildx" ]; then
    buildx_version="$(get_latest_github_release docker/buildx)"
    if [ -z "$buildx_version" ]; then
      echo "Warning: Failed to query latest buildx version, skipping installation"
      return 1
    fi
    os="$(uname | tr '[:upper:]' '[:lower:]')"
    arch="$(uname -m)"
    [ "$arch" = "aarch64" ] && arch="arm64"
    echo "Downloading Docker Buildx $buildx_version as Docker CLI plugin on $os ($arch)"
    mkdir -p "$HOME/.docker/cli-plugins"
    rm -f "$HOME/.docker/cli-plugins/docker-buildx"
    curl -fsSL "https://github.com/docker/buildx/releases/download/$buildx_version/buildx-$buildx_version.$os-$arch" \
      -o "$HOME/.docker/cli-plugins/docker-buildx"
    chmod +x "$HOME/.docker/cli-plugins/docker-buildx"
  fi
}

install_docker_compose_plugin() {
  if [ ! -x "$HOME/.docker/cli-plugins/docker-compose" ]; then
    compose_version="$(get_latest_github_release docker/compose)"
    if [ -z "$compose_version" ]; then
      echo "Warning: Failed to query latest compose version, skipping installation"
      return 1
    fi
    os="$(uname | tr '[:upper:]' '[:lower:]')"
    arch="$(uname -m)"
    if [ "$os" = "darwin" ] && [ "$arch" = "arm64" ]; then
      arch="aarch64"
    fi
    echo "Downloading Docker Compose $compose_version as Docker CLI plugin on $os ($arch)"
    mkdir -p "$HOME/.docker/cli-plugins"
    rm -f "$HOME/.docker/cli-plugins/docker-compose"
    curl -fsSL "https://github.com/docker/compose/releases/download/$compose_version/docker-compose-$os-$arch" \
      -o "$HOME/.docker/cli-plugins/docker-compose"
    chmod +x "$HOME/.docker/cli-plugins/docker-compose"
  fi
}

install_docker_mcp_plugin() {
  if [ ! -x "$HOME/.docker/cli-plugins/docker-mcp" ]; then
    # mcp-gateway releases are currently prereleases, so include them
    mcp_gateway_version="$(get_latest_github_release docker/mcp-gateway true)"
    if [ -z "$mcp_gateway_version" ]; then
      echo "Warning: Failed to query latest mcp-gateway version, skipping installation"
      return 1
    fi
    os="$(uname | tr '[:upper:]' '[:lower:]')"
    arch="$(uname -m)"
    [ "$arch" = "aarch64" ] && arch="arm64"
    echo "Downloading Docker MCP plugin $mcp_gateway_version on $os ($arch)"
    mkdir -p "$HOME/.docker/cli-plugins"
    rm -f "$HOME/.docker/cli-plugins/docker-mcp"
    tmp_tar="$(mktemp)"
    if ! curl -fsSL "https://github.com/docker/mcp-gateway/releases/download/$mcp_gateway_version/docker-mcp-$os-$arch.tar.gz" \
      -o "$tmp_tar"; then
      echo "Error: Failed to download docker-mcp plugin"
      rm -f "$tmp_tar"
      return 1
    fi
    if ! tar -xzf "$tmp_tar" -C "$HOME/.docker/cli-plugins" docker-mcp; then
      echo "Error: Failed to extract docker-mcp plugin"
      rm -f "$tmp_tar"
      return 1
    fi
    rm -f "$tmp_tar"
    if [ ! -x "$HOME/.docker/cli-plugins/docker-mcp" ]; then
      chmod +x "$HOME/.docker/cli-plugins/docker-mcp"
    fi
    if [ ! -x "$HOME/.docker/cli-plugins/docker-mcp" ]; then
      echo "Error: docker-mcp plugin is not executable after installation"
      return 1
    fi
  fi
}

run_docker_with_plugins() {
  docker_path="$1"
  shift
  if [ "$1" = "build" ]; then
    install_docker_buildx_plugin || return 1
  elif [ "$1" = "compose" ]; then
    install_docker_compose_plugin || return 1
  elif [ "$1" = "mcp" ]; then
    install_docker_mcp_plugin || {
      echo "Error: docker-mcp plugin is not available. Please check your network connection or install manually."
      return 1
    }
  fi
  "$docker_path" "$@"
}

if [ "$(uname -s)" = 'Darwin' ]; then
  # in all cases, guest VM is required to run Docker daemon
  if ! command -v limactl >/dev/null; then
    echo "Error: limactl not found on macOS, cannot start Linux VM for docker."
    exit 127
  fi
  # start VM if not running
  if ! limactl list --json | grep -q "\"$NAME\".*\"status\": *\"Running\""; then
    if [ -x "/opt/socket_vmnet/bin/socket_vmnet" ]; then
      limactl start --name "$NAME" "$HOME/.config/configent/lima/$TEMPLATE.yaml" --tty=false --vm-type=vz --network=lima:bridged --rosetta --set=".env.GITHUB_TOKEN = \"$GITHUB_TOKEN\"" ||
        limactl start --name "$NAME" --network=lima:bridged --rosetta --set=".env.GITHUB_TOKEN = \"$GITHUB_TOKEN\""
    else
      limactl start --name "$NAME" "$HOME/.config/configent/lima/$TEMPLATE.yaml" --tty=false --vm-type=vz --network=vzNAT --rosetta --set=".env.GITHUB_TOKEN = \"$GITHUB_TOKEN\"" ||
        limactl start --name "$NAME" --network=vzNAT --rosetta --set=".env.GITHUB_TOKEN = \"$GITHUB_TOKEN\""
    fi
  fi
  # macOS priority: mise, homebrew
  if [ -x "$HOME/.local/share/mise/shims/docker" ]; then
    docker_bin_path="$HOME/.local/share/mise/shims/docker"
  elif [ -x "/opt/homebrew/bin/docker" ]; then
    docker_bin_path="/opt/homebrew/bin/docker"
  elif [ -x "/usr/local/bin/docker" ]; then
    docker_bin_path="/usr/local/bin/docker"
  fi
  if [ -n "$docker_bin_path" ]; then
    run_docker_with_plugins "$docker_bin_path" "$@"
  else
    # no docker CLI found on macOS -> call this script on the Linux guest VM
    limactl shell "$NAME" ~/configent/bin/docker "$@"
  fi
else
  # shellcheck disable=SC2155  # will not declare separately
  if [ -z "$DOCKER_HOST" ]; then
    if [ -S "/var/run/docker.sock" ]; then
      export DOCKER_HOST="unix:///var/run/docker.sock" # rootful
    elif [ -S "$XDG_RUNTIME_DIR/docker.sock" ]; then
      export DOCKER_HOST="unix://$XDG_RUNTIME_DIR/docker.sock" # rootless
    fi
  fi
  if [ -x "$HOME/.local/share/mise/shims/docker" ]; then
    # user-wide docker-cli installation (mise registry)
    run_docker_with_plugins "$HOME/.local/share/mise/shims/docker" "$@"
  elif [ -x "$HOME/bin/docker" ]; then
    # user-wide docker installation (https://get.docker.com/rootless)
    export PATH="$HOME/bin:$PATH"
    run_docker_with_plugins "$HOME/bin/docker" "$@"
  elif [ -x "/usr/bin/docker" ]; then
    # system-wide docker installation (via DEB/RPM packages)
    run_docker_with_plugins "/usr/bin/docker" "$@"
  else
    echo "Error: Docker CLI not found or executable in this Linux system."
    exit 127
  fi
fi
