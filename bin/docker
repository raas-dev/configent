#!/bin/sh

# configent (https://github.com/raas-dev/configent)
# One command automated macOS/Linux laptop/VM/container bootstrapper.
#
# Copyright(C) 2016- Anssi SyrjÃ¤salo (http://a.syrjasalo.com)
# Licensed under GNU Lesser General Public License v3 (LGPL-3.0).

# shim for running `docker` in lima VM

: "${NAME:="default"}"
: "${TEMPLATE:="ubuntu"}"

install_docker_buildx_plugin() {
  if [ ! -x "$DOCKER_CLI_PLUGINS_DIR/docker-buildx" ]; then
    buildx_version="v0.25.0"
    os="$(uname | tr '[:upper:]' '[:lower:]')"
    arch="$(uname -m)"
    if [ "$arch" = "aarch64" ]; then
      arch="arm64"
    fi
    echo "Downloading Docker Buildx as Docker CLI plugin on $os ($arch)"
    rm -f "$DOCKER_CLI_PLUGINS_DIR/docker-buildx"
    curl --create-dirs -fsSL "https://github.com/docker/buildx/releases/download/$buildx_version/buildx-$buildx_version.$os-$arch" \
      -o "$DOCKER_CLI_PLUGINS_DIR/docker-buildx"
    if [ "$(id -u)" = 0 ]; then
      chmod a+rx "$DOCKER_CLI_PLUGINS_DIR/docker-buildx"
    else
      chmod +x "$DOCKER_CLI_PLUGINS_DIR/docker-buildx"
    fi
  fi
}

install_docker_compose_plugin() {
  if [ ! -x "$DOCKER_CLI_PLUGINS_DIR/docker-compose" ]; then
    os="$(uname)"
    arch="$(uname -m)"
    if [ "$os" = "Darwin" ]; then
      os='darwin'
      [ "$arch" = "arm64" ] && arch="aarch64"
    fi
    echo "Downloading Docker Compose as Docker CLI plugin on $os ($arch)"
    rm -f "$DOCKER_CLI_PLUGINS_DIR/docker-compose"
    curl --create-dirs -fsSL "https://github.com/docker/compose/releases/latest/download/docker-compose-$os-$arch" \
      -o "$DOCKER_CLI_PLUGINS_DIR/docker-compose"
    if [ "$(id -u)" = 0 ]; then
      chmod a+rx "$DOCKER_CLI_PLUGINS_DIR/docker-compose"
    else
      chmod +x "$DOCKER_CLI_PLUGINS_DIR/docker-compose"
    fi
  fi
}

if [ "$(uname -s)" = 'Darwin' ]; then
  # in all cases, guest VM is required to run Docker daemon
  if ! command -v limactl >/dev/null; then
    echo "Error: limactl not found on macOS, cannot start Linux VM for docker."
    exit 127
  fi
  # start VM if not running
  if ! limactl list --json | grep -q "\"$NAME\".*\"status\": *\"Running\""; then
    limactl start --name "$NAME" "$HOME/.config/configent/lima/$TEMPLATE.yaml" --tty=false --vm-type=vz --network=vzNAT --set=".env.GITHUB_TOKEN = \"$GITHUB_TOKEN\"" ||
      limactl start --name "$NAME" --network=vzNAT --set=".env.GITHUB_TOKEN = \"$GITHUB_TOKEN\""
  fi
  # try homebrew installed docker CLI first on macOS
  if [ -x "/opt/homebrew/bin/docker" ]; then
    docker_bin_path="/opt/homebrew/bin/docker"
  elif [ -x "/usr/local/bin/docker" ]; then
    docker_bin_path="/opt/homebrew/bin/docker"
  fi
  if [ -n "$docker_bin_path" ]; then
    DOCKER_CLI_PLUGINS_DIR="$HOME/.docker/cli-plugins"
    if [ "$1" = "build" ]; then
      install_docker_buildx_plugin
    elif [ "$1" = "compose" ]; then
      install_docker_compose_plugin
    fi
    "$docker_bin_path" "$@"
  else
    # no docker CLI found on macOS -> call this script on the Linux guest VM
    limactl shell "$NAME" ~/configent/bin/docker "$@"
  fi
else
  # shellcheck disable=SC2155  # will not declare separately
  [ -z "$XDG_RUNTIME_DIR" ] && export XDG_RUNTIME_DIR="/run/user/$(id -u)"
  if [ -z "$DOCKER_HOST" ]; then
    if [ -S "/var/run/docker.sock" ]; then
      export DOCKER_HOST="unix:///var/run/docker.sock" # rootful
    elif [ -S "$XDG_RUNTIME_DIR/docker.sock" ]; then
      export DOCKER_HOST="unix://$XDG_RUNTIME_DIR/docker.sock" # rootless
    fi
  fi
  if [ -z "$DOCKER_DEFAULT_PLATFORM" ]; then
    arch="$(uname -m)"
    if [ "$arch" = 'aarch64' ] || [ "$arch" = 'arm64' ]; then
      export DOCKER_DEFAULT_PLATFORM="linux/amd64"
    fi
  fi
  if [ -x "$HOME/bin/docker" ]; then
    # user-wide docker installation (https://get.docker.com/rootless)
    export PATH="$HOME/bin:$PATH"
    DOCKER_CLI_PLUGINS_DIR="$HOME/.docker/cli-plugins"
    if [ "$1" = "build" ]; then
      install_docker_buildx_plugin
    elif [ "$1" = "compose" ]; then
      install_docker_compose_plugin
    fi
    "$HOME/bin/docker" "$@"
  elif [ -x "/usr/bin/docker" ]; then
    # system-wide docker installation (via DEB/RPM packages)
    DOCKER_CLI_PLUGINS_DIR="/usr/libexec/docker/cli-plugins"
    if [ "$1" = "build" ]; then
      install_docker_buildx_plugin
    elif [ "$1" = "compose" ]; then
      install_docker_compose_plugin
    fi
    "/usr/bin/docker" "$@"
  else
    echo "Error: Docker CLI not found or executable in this Linux system."
    exit 127
  fi
fi
