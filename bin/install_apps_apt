#!/bin/sh

# configent (https://github.com/raas-dev/configent)
# One command automated macOS/Linux laptop/VM/container bootstrapper.
#
# Copyright(C) 2016- Anssi SyrjÃ¤salo (http://a.syrjasalo.com)
# Licensed under GNU Lesser General Public License v3 (LGPL-3.0).

trap "printf '\nCaught ^C from user - exiting now\n' ; exit 130" INT

if [ "$(id -u)" = 0 ]; then
  SUDO=''
  SUDOEULA=''
  export DEBIAN_FRONTEND=noninteractive
elif command -v sudo >/dev/null; then
  SUDO='sudo DEBIAN_FRONTEND=noninteractive'
  SUDOEULA='sudo ACCEPT_EULA=Y'

  # Ask sudo password upfront
  sudo -n true || sudo -v

  # Keep sudo alive until the script has finished
  while true; do
    sudo -n true
    sleep 60
    kill -0 "$$" || exit
  done 2>/dev/null &
else
  printf "\nERROR: User is non-root and sudo not available, cannot proceed.\n"
  exit 1
fi

# Update package lists
$SUDOEULA apt-get update

# Ensure apt-get sources.list works with https
$SUDO apt-get install -y apt-transport-https

# Locales (required on Debian)
$SUDO apt-get install -y locales
echo "en_US.UTF-8 UTF-8" | $SUDO tee /etc/locale.gen
echo "LANG=en_US.UTF-8" | $SUDO tee /etc/locale.conf
$SUDO locale-gen en_US.UTF-8

# Certificates
$SUDO apt-get install -y ca-certificates

# Cryptography
$SUDO apt-get install -y gnupg

# Common build tools
$SUDO apt-get install -y build-essential cmake m4 pkg-config

# Common development dependencies
$SUDO apt-get install -y libbz2-dev libcurl4-openssl-dev libffi-dev \
  libgmp-dev liblzma-dev libreadline-dev libsqlite3-dev libssl-dev \
  libxml2-dev libyaml-dev zlib1g-dev

# Utils
$SUDO apt-get install -y coreutils dnsutils file findutils \
  git git-lfs htop lsb-release procps traceroute unzip wget \
  whois zip

# The logfile navigator
$SUDO apt-get install -y lnav

# Bash
$SUDO apt-get install -y bash

# Zsh
$SUDO apt-get install -y zsh

# Neovim
$SUDO apt-get install -y neovim

# git-extras
$SUDO apt-get install -y git-extras

# tmux
$SUDO apt-get install -y tmux

# GNU awk
$SUDO apt-get install -y gawk

# ctags
$SUDO apt-get install -y universal-ctags

# macOS pbcopy/pbpaste like experience
#$SUDO apt-get install -y xsel

# Microsoft TrueType fonts (accepts EULA)
#$SUDO apt-get install -y ttf-mscorefonts-installer

# AppArmor for rootless Docker (required on Ubuntu)
filename="$(echo "$HOME/bin/rootlesskit" | sed -e s@^/@@ -e s@/@.@g)"
cat <<EOF >"$HOME/$filename"
abi <abi/4.0>,
include <tunables/global>

"$HOME/bin/rootlesskit" flags=(unconfined) {
  userns,

  include if exists <local/$filename>
}
EOF
$SUDO mv "$HOME/$filename" "/etc/apparmor.d/$filename"
$SUDO systemctl restart apparmor.service

# Docker (rootless)
$SUDO apt-get install -y dbus-user-session fuse3 iptables uidmap
curl -fsSL https://get.docker.com/rootless | sh
systemctl --user start dbus
systemctl --user start docker
$SUDO loginctl enable-linger "$USER"

# NVIDIA Container Toolkit
# https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html
curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | $SUDO gpg --dearmor --yes -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg &&
  curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list |
  sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' |
    $SUDO tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
$SUDO apt-get update
$SUDO apt-get install -y nvidia-container-toolkit
# rootless install:
nvidia-ctk runtime configure --runtime=docker --config="$HOME/.config/docker/daemon.json"
systemctl --user restart docker
$SUDO nvidia-ctk config --set nvidia-container-cli.no-cgroups --in-place
# rootful install:
# $SUDO nvidia-ctk runtime configure --runtime=docker
# $SUDO systemctl restart docker

# gVisor
# https://gvisor.dev/docs/user_guide/install
curl -fsSL https://gvisor.dev/archive.key | $SUDO gpg --dearmor --yes -o /usr/share/keyrings/gvisor-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/gvisor-archive-keyring.gpg] https://storage.googleapis.com/gvisor/releases release main" | $SUDO tee /etc/apt/sources.list.d/gvisor.list >/dev/null
$SUDO apt-get update
$SUDO apt-get install -y runsc
# rootless install:
runsc install -config_file "$HOME/.config/docker/daemon.json"
systemctl --user restart docker
# rootful install:
# runsc install
# $SUDO systemctl reload docker

# Snap
#if [ "$SNAPS" != 'false' ]; then
#$SUDO apt-get install -y snapd
#fi

# Flatpak
if [ "$FLATPAKS" != 'false' ]; then
  $SUDO apt-get install -y flatpak
fi
