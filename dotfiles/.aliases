#!/usr/bin/env bash

# shellcheck disable=SC2086  # not quoting args passed to nixery() docker run

### OS specific ################################################################

# Upgrade brew formulas, and zplugins if on zsh
alias br='command -v brew >/dev/null && \
  (brew update && brew upgrade ; brew autoremove) ; \
  command -v zplug >/dev/null && (zplug update ; zplug clean)'

if [[ $OSTYPE == darwin* ]]; then
  # Brew cask upgrade
  alias brc='brew cu --all --yes --cleanup'

  # Install macOS application updates
  alias up='br ; brc'

  # Install macOS application and system updates
  alias dup='up ; softwareupdate --install --all --force'

  # Recursively delete .DS_Store files in the current path
  alias cleanupds='/usr/bin/find . -type f -name "*.DS_Store" -ls -delete'

  # Clean up LaunchServices to remove duplicates in "Open With" menues
  alias cleanupls='/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister \
    -kill -r -domain local -domain system -domain user && \
    killall Finder'

  # Mute or unmute sounds
  alias mute='osascript -e "set volume output muted true"'
  alias blast='osascript -e "set volume output muted false"'

  # Fix broken icons in Dock
  alias reseticons="sudo /usr/bin/find /private/var/folders/ -name com.apple.dock.iconcache -exec rm {} \;; sudo /usr/bin/find /private/var/folders/ -name com.apple.iconservices -exec rm -rf {} \;; sudo rm -rf /Library/Caches/com.apple.iconservices.store; sleep 3; killall Dock; killall Finder"

  # Fix macOS keyboard input sources
  alias resetkeyboard="rm -f ~/Library/Preferences/com.apple.HIToolbox.plist ; \
  sudo rm -f /Library/Preferences/com.apple.HIToolbox.plist"

  # Disable or enable Spotlight (indexing)
  alias spotoff='sudo mdutil -a -i off'
  alias spoton='sudo mdutil -a -i on'

  # Canonical hex dump; some systems have this symlinked
  command -v hd >/dev/null || alias hd='hexdump -C'

  # macOS has no `md5sum`, use `md5` as a fallback
  command -v md5sum >/dev/null || alias md5sum='md5'

  # macOS has no `sha1sum`, use `shasum` as a fallback
  command -v sha1sum >/dev/null || alias sha1sum='shasum'
else
  if command -v apt >/dev/null; then
    alias up='sudo apt update && \
      sudo apt upgrade -y && sudo apt autoremove -y && sudo apt clean ; \
      br'
    alias dup='sudo apt update && \
      sudo apt dist-upgrade -y && sudo apt autoremove -y && sudo apt clean ; \
      br'
  elif command -v yum >/dev/null; then
    alias up='sudo yum update -y --exclude=kernel* && sudo yum autoremove -y ; \
      br'
    alias dup='sudo yum update -y && sudo yum autoremove -y ; \
      br'
  elif command -v yay >/dev/null; then
    alias up='yay --noconfirm -Suy && \
      yay -Qdtq | yay --noconfirm -Rs - ; \
      br'
    alias dup='up'
  elif command -v pacman >/dev/null; then
    alias up='sudo pacman --noconfirm -Suy && \
      sudo pacman -Qdtq | sudo pacman --noconfirm -Rs - ; \
      br'
    alias dup='up'
  elif command -v apk >/dev/null; then
    alias up='sudo apk update && \
      sudo apk add --upgrade apk-tools && \
      sudo apk upgrade ; \
      br'
    alias dup='up'
  fi

  # Similar to macOS `pbcopy` and `pbpaste`
  alias pbcopy='xsel --clipboard --input'
  alias pbpaste='xsel --clipboard --output'

  # Similar to macOS `open`
  alias open='xdg-open'
fi

### More sensible defaults #####################################################

alias code='code --reuse-window --add'

alias grep='grep --color'
alias egrep='egrep --color'
alias fgrep='fgrep --color'

alias ping='ping -c 999'

### Safer defaults #############################################################

alias chown='chown --preserve-root'
alias chmod='chmod --preserve-root'
alias chgrp='chgrp --preserve-root'

### Enhanced ls ################################################################

if command -v lsd >/dev/null; then
  alias ls='lsd --group-dirs first --date="+%a %d-%b-%y %H:%M:%S" --icon never'
  alias la='ls -Al'
  alias le='ls -Al --extensionsort && echo Ordered by extension, alphabetically'
  alias lu='ls -Al --sizesort && echo Ordered by size, biggest first'
  alias lt='ls -Al --timesort && echo Ordered by change time, most recent first'
  alias lut='ls -Al --sizesort --total-size --tree --depth 2'
else
  alias ls='ls --color -h'
  alias la='ls -Al'
  alias le='ls -Al -XB && echo Ordered by extension, alphabetically'
  alias lu='ls -Al -S && echo Ordered by size, biggest first'
  alias lt='ls -Al -tc && echo Ordered by change time, most recent first'
fi

### Shortcuts ##################################################################

alias a='rg --smart-case --no-ignore --hidden --glob "!.git/"'
alias b='bat --theme=base16'
alias c='kalker'
alias d='docker stop ${PWD##*/} ; docker kill ${PWD##*/} ; docker build --tag ${PWD##*/} . && docker run -d --name ${PWD##*/} --rm --cap-drop ALL --publish-all -it ${PWD##*/} && docker port ${PWD##*/}'
alias e='ext'
alias f='fd --ignore-case --no-ignore --hidden'
alias g='gitui'
alias h='xh'
alias i='btop'
# j is for zoxide
alias k='kubectl'
alias l='la'
# m is for m-cli
alias n='nixery'
alias o='open'
alias p='procs --tree --watch-interval 1'
alias q='clear'
# r is for reloading shell's configuration (alias is in shell specific rc files)
alias s='sncli'
alias t='taillog'
alias u='usage'
alias v='limactl'
alias w='which -a'
alias x='pkill -i -f'
alias y='cht.sh'
alias z='whatlistens'
alias §='got -o -s en -t fi'
alias ,='got -o -s fi -t en'
alias _='bat --show-all'

### Vim ########################################################################

command -v nvim >/dev/null && alias vim='nvim'

### Lima VMs ###################################################################

alias vm4rancher="limactl start \$HOME/local/etc/lima/rancher.yaml \
  --tty=false ; \
  export KUBECONFIG=\$HOME/.lima/rancher/kubeconfig.yaml ; \
  limactl shell rancher sudo cat /etc/rancher/k3s/k3s.yaml > \$KUBECONFIG ; \
  kubectl get nodes"

alias vm4ubuntu="limactl start \$HOME/local/etc/lima/ubuntu.yaml --tty=false"
alias vm4debian="limactl start \$HOME/local/etc/lima/debian.yaml --tty=false"

alias vm4alma="limactl start \$HOME/local/etc/lima/almalinux.yaml --tty=false"
alias vm4centos="limactl start \$HOME/local/etc/lima/centos.yaml --tty=false"
alias vm4fedora="limactl start \$HOME/local/etc/lima/fedora.yaml --tty=false"
alias vm4rocky="limactl start \$HOME/local/etc/lima/rocky.yaml --tty=false"
alias vm4oracle="limactl start \$HOME/local/etc/lima/oraclelinux.yaml --tty=false"

alias vm4arch="limactl start \$HOME/local/etc/lima/archlinux.yaml --tty=false"
alias vm4alpine="limactl start \$HOME/local/etc/lima/alpine.yaml --tty=false"

### Docker #####################################################################

alias drmc='docker rm --force $(docker ps --all --quiet)'
alias drmv='docker volume rm --force $(docker volume ls --quiet)'
alias drmi='docker rmi --force $(docker images --all --quiet)'
alias dpr='drmc; drmv; drmi; docker system prune --force --volumes'

alias rustscan='nixery rustscan rustscan'
alias naabu='nixery naabu naabu'

### nerdctl ####################################################################

alias nrmc='nerdctl rm --force $(nerdctl ps --all --quiet)'
alias nrmv='nerdctl volume rm --force $(nerdctl volume ls --quiet)'
alias nrmi='nerdctl rmi $(nerdctl images --all --quiet)'
alias npr='nrmc; nrmv; nrmi'

alias netdata='nerdctl run -d --name=netdata \
  -p 19999:19999 \
  -v netdataconfig:/etc/netdata \
  -v netdatalib:/var/lib/netdata \
  -v netdatacache:/var/cache/netdata \
  -v /etc/passwd:/host/etc/passwd:ro \
  -v /etc/group:/host/etc/group:ro \
  -v /proc:/host/proc:ro \
  -v /sys:/host/sys:ro \
  -v /etc/os-release:/host/etc/os-release:ro \
  --cap-add SYS_PTRACE \
  --security-opt apparmor=unconfined \
  netdata/netdata'

### Misc #######################################################################

# Copy the current path to clipboard
alias cwd='pwd | tr -d "\n" | pbcopy'

# Public IP
alias ip='curl --silent --ipv4 https://ifconfig.co/json | jq .'
alias ipv6='curl --silent --ipv6 https://ifconfig.co/ip'

# Python 3 HTTP server
alias serv='python3 -m http.server 8000 --bind 127.0.0.1'

# Display PATH content
alias path='echo -e "${PATH//:/\\n}"'

# Enable aliases to be sudo’ed
alias sudo='sudo '

# Get the week number
alias week='date +%V'

### Utilities ##################################################################

# Quick extract
ext() {
  if [[ -f $1 ]]; then
    case $1 in
    *.tar.bz2) tar xvjf "$1" ;;
    *.tar.gz) tar xvzf "$1" ;;
    *.bz2) bunzip2 "$1" ;;
    *.rar) unrar x "$1" ;;
    *.gz) gunzip "$1" ;;
    *.tar) tar xvf "$1" ;;
    *.tbz2) tar xvjf "$1" ;;
    *.tgz) tar xvzf "$1" ;;
    *.zip) unzip "$1" ;;
    *.Z) uncompress "$1" ;;
    *.7z) 7z x "$1" ;;
    *) echo "don't know how to extract '$1'..." ;;
    esac
  else
    echo "'$1' is not a valid file!"
  fi
}

# nixery.dev
nixery() {
  [[ -z "$1" ]] && echo "Usage: $0 NIX-PKG [COMMAND]" && return
  local pkg="$1"
  shift
  local args="${*:-$pkg}"
  if [[ $(uname -m) == 'arm64' ]] || [[ $(uname -m) == 'aarch64' ]]; then
    image="nixery.dev/arm64/shell/$pkg"
  else
    image="nixery.dev/shell/$pkg"
  fi
  docker run -it --rm --name "$pkg" \
    --publish-all \
    --volume="$PWD:$PWD":ro \
    --workdir="$PWD" \
    "$image" $args
}

# Follow given log file, or cloud-init output if not given
taillog() {
  local log="${1:-"/var/log/cloud-init-output.log"}"
  tail --follow --verbose --lines=20 "$log" || \
    sudo tail --follow --verbose --lines=20 "$log"
}

# List 20 biggest directories
usage() {
  du | sort -r -n |
    awk '{split("K M G",v); s=1; while($1>1024){$1/=1024; s++} print int($1)" "v[s]"\t"$2}' | head -n 20
}

# Show process listening on given port
whatlistens() {
  lsof -P -i :"$1" | column -t
}

# Quick password generator
genpass() {
  tr </dev/urandom -dc 'a-zA-Z0-9-_!@#$%^&*()_+{}|:<>?=' |
    fold -w "$1" | head -n1 | pbcopy
}

# Remove all non-cask brew
brewclear() {
  brew list --formula | xargs brew uninstall --ignore-dependencies --force
}

# Npm remove all global packages (except npm installed npm)
npmclear() {
  npm ls --location=global -p --depth=0 | awk -F/ '/node_modules/ && !/\/npm$/ {print $NF}' |
    xargs npm --location=global rm
}

# Pip remove all
pipclear() {
  pip freeze | grep -v "^-e" | xargs pip uninstall -y
}

# Gem remove all
gemclear() {
  gem uninstall -aIx
}

# Recursively remove __pycache__ direcotries
pyclean() {
  find . -type d -name "__pycache__" -exec rm -r {} +
}

### Latest version of global nodejs devtools ###################################

# Yarn
alias yarn='npx -y yarn'

# configurable-http-proxy
alias configurable-http-proxy='npx -y configurable-http-proxy'

# Find unused and missing package.json (dev)Dependencies
alias depcheck='npx -y depcheck'

# Command-line JSON processing tool
alias fx='npx -y fx'

# Simple, zero-configuration command-line http server
alias http-server='npx -y http-server'

# Bump version and generate CHANGELOG.md
alias standard-version='npx -y standard-version'

# https://github.com/kefranabg/readme-md-generator
alias readme-md-generator='npx -y readme-md-generator'

# Codemods for project config files
alias mrm='npx -y mrm'

# Upgrades your package.json dependencies to the latest version
alias ncu='npx -y npm-check-updates'

### decode #####################################################################

decode_base64_url() {
  local len=$((${#1} % 4))
  local result="$1"
  if [ $len -eq 2 ]; then
    result="$1"'=='
  elif [ $len -eq 3 ]; then
    result="$1"'='
  fi
  echo "$result" | tr '_-' '/+' | base64 -d
}

decode_jwt_partial() {
  decode_base64_url "$(echo -n "$2" | cut -d "." -f "$1")" | jq 'if .iat then (.iatstr = (.iat|todate)) else . end | if .exp then (.expstr = (.exp|todate)) else . end | if .nbf then (.nbfstr = (.nbf|todate)) else . end'
}

decode_jwt_header_payload() {
  decode_jwt_partial 1 "$1"
  decode_jwt_partial 2 "$1"
}

# decode jwt header + payload
alias jwthp="decode_jwt_header_payload"

# decode jwt header
alias jwth="decode_jwt_partial 1"

# decode jwt payload
alias jwtp="decode_jwt_partial"

### macOS keychain #############################################################

if [[ $OSTYPE == darwin* ]]; then
  get_keychain_variable() {
    local name="$1"
    [ -z "$name" ] && echo "Usage: get_keychain_variable <varname>" && return 1
    security find-generic-password -w \
      -a "$USER" -D "environment variable" -s "$name"
  }

  set_keychain_variable() {
    local name="$1"
    [ -z "$name" ] && echo "Usage: set_keychain_variable <varname>" && return 1
    echo -n "Enter secret for $name: "
    read -r secret
    [ -z "$secret" ] && echo "Error: Empty secret" && return 1
    security add-generic-password -U \
      -a "$USER" -D "environment variable" -s "$name" -w "$secret"
  }
fi
