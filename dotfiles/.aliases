#!/bin/bash
# the above shebang is purely for ShellCheck, this file is not executable

### Upgrade for all package managers ###########################################

# shellcheck disable=SC2139  # ok to expand variable read-time, not run-time
skipped_managers="containers helm"
alias up="topgrade --yes --no-retry --disable system restarts $skipped_managers"
alias dup="topgrade --yes --no-retry --disable $skipped_managers"

### OS specific ################################################################

if [ "$(uname -s)" = 'Darwin' ]; then
  # Recursively delete .DS_Store files in the current path
  alias cleanupds='/usr/bin/find . -type f -name "*.DS_Store" -ls -delete'

  # Clean up LaunchServices to remove duplicates in "Open With" menues
  alias cleanupls='/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister \
    -kill -r -domain local -domain system -domain user &&
    killall Finder'

  # Fix broken icons in Dock
  alias reseticons="sudo /usr/bin/find /private/var/folders/ \
    -name com.apple.dock.iconcache -exec rm {} \; ;
    sudo /usr/bin/find /private/var/folders/ -name com.apple.iconservices -exec rm -rf {} \; ;
    sudo rm -rf /Library/Caches/com.apple.iconservices.store ;
    sleep 3 ;
    killall Dock ;
    killall Finder"

  # Fix macOS keyboard input sources
  alias resetkeyboard="rm -f ~/Library/Preferences/com.apple.HIToolbox.plist ;
    sudo rm -f /Library/Preferences/com.apple.HIToolbox.plist"

  # Disable or enable Spotlight (indexing)
  alias spotoff='sudo mdutil -a -i off'
  alias spoton='sudo mdutil -a -i on'

  # Canonical hex dump; some systems have this symlinked
  command -v hd >/dev/null || alias hd='hexdump -C'

  # macOS keychain
  get_keychain_variable() {
    local name="$1"
    [ -z "$name" ] && echo "Usage: get_keychain_variable <varname>" && return 1
    security find-generic-password -w \
      -a "$USER" -D "environment variable" -s "$name"
  }

  set_keychain_variable() {
    local name="$1"
    [ -z "$name" ] && echo "Usage: set_keychain_variable <varname>" && return 1
    printf "Enter secret for %s: " "$name"
    read -r secret
    [ -z "$secret" ] && echo "Error: Empty secret" && return 1
    security add-generic-password -U \
      -a "$USER" -D "environment variable" -s "$name" -w "$secret"
  }
else
  # Similar to macOS `pbcopy` and `pbpaste`
  alias pbcopy='xsel --clipboard --input'
  alias pbpaste='xsel --clipboard --output'

  # Similar to macOS `open`
  alias open='xdg-open'
fi

### More sensible defaults #####################################################

alias code='code --reuse-window --add'

alias grep='grep --color'
alias egrep='egrep --color'
alias fgrep='fgrep --color'

alias ping='ping -c 999'

### Safer defaults #############################################################

alias chown='chown --preserve-root'
alias chmod='chmod --preserve-root'
alias chgrp='chgrp --preserve-root'

### Enhanced ls ################################################################

if command -v lsd >/dev/null; then
  alias ls='lsd --group-dirs first --date="+%a %d-%b-%y %H:%M:%S" --icon never'
  alias la='ls -Al'
  alias le='ls -Al --extensionsort && echo Ordered by extension, alphabetically'
  alias lu='ls -Al --sizesort && echo Ordered by size, biggest first'
  alias lt='ls -Al --timesort && echo Ordered by change time, most recent first'
  alias lut='ls -Al --sizesort --total-size --tree --depth 2'
else
  alias ls='ls --color -h'
  alias la='ls -Al'
  alias le='ls -Al -XB && echo Ordered by extension, alphabetically'
  alias lu='ls -Al -S && echo Ordered by size, biggest first'
  alias lt='ls -Al -tc && echo Ordered by change time, most recent first'
fi

### Shortcuts ##################################################################

alias a='rg --smart-case --no-ignore --hidden --glob "!.git/"'
alias b='bat'
alias c='sgpt_code'
# d is for generic docker build and run, see d()
# e is for generic extract package, see e()
alias f='fd --ignore-case --no-ignore --hidden'
alias g='gitui'
alias h='xh'
alias i='glances'
# j is for zoxide
alias k='kalker'
alias l='la'
# m is for m-cli
# n is for ad-hoc nix-shell in docker, see n()
alias o='open'
alias p='procs --tree --watch-interval 1'
alias q='clear'
# r is for reloading shell's configuration (alias is in shell specific rc files)
alias s='sgpt_chat'
alias t='taillog'
alias u='diskonaut'
alias v='limactl'
alias w='which -a'
alias x='pkill -i -f'
alias y='cht.sh'
alias z='whatlistens'
alias ¨='bat --show-all --theme=default'
alias §='trans :fi'
alias ,='trans'
alias _='sgpt_shell'

### watch ######################################################################

command -v viddy >/dev/null && alias watch='viddy --differences'

### vim ########################################################################

command -v nvim >/dev/null && alias vim='nvim'

### Lima VMs ###################################################################

alias vm4ubuntu="limactl start \$HOME/local/etc/lima/ubuntu.yaml --tty=false"
alias vm4debian="limactl start \$HOME/local/etc/lima/debian.yaml --tty=false ;
  export KUBECONFIG=\$HOME/.lima/debian/kubeconfig.yaml ;
  kubectl get nodes"

alias vm4fedora="limactl start \$HOME/local/etc/lima/fedora.yaml --tty=false"
alias vm4centos="limactl start \$HOME/local/etc/lima/centos.yaml --tty=false"

alias vm4alma="limactl start \$HOME/local/etc/lima/almalinux.yaml --tty=false"
alias vm4rocky="limactl start \$HOME/local/etc/lima/rocky.yaml --tty=false"
alias vm4oracle="limactl start \$HOME/local/etc/lima/oraclelinux.yaml --tty=false"

alias vm4suse="limactl start \$HOME/local/etc/lima/opensuse.yaml --tty=false"
alias vm4arch="limactl start \$HOME/local/etc/lima/archlinux.yaml --tty=false"
alias vm4alpine="limactl start \$HOME/local/etc/lima/alpine.yaml --tty=false"

### Docker #####################################################################

alias drmc='docker rm --force $(docker ps --all --quiet)'
alias drmv='docker volume rm --force $(docker volume ls --quiet)'
alias drmi='docker rmi --force $(docker images --all --quiet)'
alias dpr='drmc ; drmv ; drmi ; docker system prune --force --volumes'

# https://github.com/clowa/docker-powershell-core
alias pwsh='docker run --init -it --rm \
  --cap-drop ALL \
  --volume="$PWD:$PWD" \
  --workdir="$PWD" \
  clowa/powershell-core'

### nerdctl ####################################################################

alias nrmc='nerdctl rm --force $(nerdctl ps --all --quiet)'
alias nrmv='nerdctl volume rm --force $(nerdctl volume ls --quiet)'
alias nrmi='nerdctl rmi --force $(nerdctl images --all --quiet)'
alias npr='nrmc ; nrmv ; nrmi ; nerdctl system prune --force --volumes'

# https://github.com/svenstaro/miniserve
alias miniserve='nerdctl run --init -it --rm \
  --cap-drop ALL \
  --publish 127.0.0.1:8080:8080 \
  --volume $PWD:/data \
  svenstaro/miniserve \
  --hide-version-footer -p 8080 /data'

### Misc #######################################################################

# Copy the current path to clipboard
alias cwd='pwd | tr -d "\n" | pbcopy'

# Display public IP
alias ip='curl --silent --ipv4 https://ifconfig.co/json | jq .'
alias ipv6='curl --silent --ipv6 https://ifconfig.co/ip'

# Display PATH content
alias path='printf "${PATH//:/\\n}\n"'

# Enable aliases to be sudo’ed
alias sudo='sudo '

# Display week number
alias week='date +%V'

# Weather (https://wttr.in/:help)
alias wttr='curl "https://wttr.in?format=v2&MF"'

### Utilities ##################################################################

# OpenAI helpers
sgpt() {
  pipx run --spec=shell-gpt sgpt "$@"
}

sgpt_chat() {
  mkdir -p "$HOME/.config/shell_gpt/roles"
  echo '{
    "name": "assistant",
    "expecting": "Answer",
    "variables": null,
    "role": "You are a helpful assistant."
  }' >"$HOME/.config/shell_gpt/roles/assistant.json"
  sgpt --no-cache --role assistant \
    --model gpt-4 --chat "$(date +"%Y-%m-%d"):chat$TMUX_PANE" "$*"
}

sgpt_code() {
  sgpt --no-cache --temperature 0 --chat "$(date +"%Y-%m-%d"):code$TMUX_PANE" \
    --model gpt-4 --code "$*"
}

sgpt_shell() {
  sgpt --no-cache --temperature 0 --chat "$(date +"%Y-%m-%d"):shell$TMUX_PANE" \
    --shell "$*"
}

# Generic docker build and run
d() {
  # lowercase the image name to allow pushing it to container registries
  # shellcheck disable=SC2155  # will not declare separately, value compactness
  local name="$(echo "${PWD##*/}" | tr '[:upper:]' '[:lower:]')"
  if docker top "$name" &>/dev/null; then
    docker stop "$name" || docker kill "$name"
  fi

  if [ -r "$PWD/Dockerfile" ]; then
    echo "[d] Building image from Dockerfile"
    docker build --pull --tag "$name" . || return
  else
    echo "[d] Building image with nixpacks"
    TMPDIR="/tmp/lima" nixpacks build . --name "$name" || return
  fi

  [ -r "$PWD/.env" ] && local env_file="--env-file $PWD/.env"
  if [ -n "$1" ] && [ "$1" != "-d" ] && [ "$1" != "--detach" ]; then
    local run_args="--log-driver none --entrypoint /bin/sh"
    local cmd="-c '$*'"
  else
    local run_args="$*"
  fi

  eval docker run --init -it --name "$name" --rm \
    --cap-drop ALL \
    --publish-all \
    --publish 127.0.0.1:8080:8080 \
    "$env_file" \
    "$run_args" \
    "$name" "$cmd"

  if [ "$run_args" = "-d" ] || [ "$run_args" = "--detach" ]; then
    echo "[d] Published ports: container -> host"
    docker port "$name"
    echo "[d] Following logs, ^C does not halt the container"
    docker logs --follow "$name"
  fi
}

# Generic extract package
e() {
  # Forked from: https://github.com/xvoland/Extract/blob/master/extract.sh
  if [ $# -eq 0 ]; then
    echo "Usage: e <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz|.zlib|.cso>"
    echo "       e <path/file_name_1.ext> [path/file_name_2.ext] [path/file_name_3.ext]"
  fi

  for n in "$@"; do
    if [ ! -f "$n" ]; then
      echo "[e] File does not exist: $n"
      return 1
    fi

    case "${n%,}" in
    *.cbt | *.tar.bz2 | *.tar.gz | *.tar.xz | *.tbz2 | *.tgz | *.txz | *.tar)
      tar zxvf "$n"
      ;;
    *.lzma) unlzma ./"$n" ;;
    *.bz2) bunzip2 ./"$n" ;;
    *.cbr | *.rar) unrar x -ad ./"$n" ;;
    *.gz) gunzip ./"$n" ;;
    *.cbz | *.epub | *.zip) unzip ./"$n" ;;
    *.z) uncompress ./"$n" ;;
    *.7z | *.apk | *.arj | *.cab | *.cb7 | *.chm | *.deb | *.iso | *.lzh | *.msi | *.pkg | *.rpm | *.udf | *.wim | *.xar | *.vhd)
      7z x ./"$n"
      ;;
    *.xz) unxz ./"$n" ;;
    *.exe) cabextract ./"$n" ;;
    *.cpio) cpio -id <./"$n" ;;
    *.cba | *.ace) unace x ./"$n" ;;
    *.zpaq) zpaq x ./"$n" ;;
    *.arc) arc e ./"$n" ;;
    *.cso) ciso 0 ./"$n" ./"$n.iso" &&
      extract "$n.iso" && \rm -f "$n" ;;
    *.zlib) zlib-flate -uncompress <./"$n" >./"$n.tmp" &&
      mv ./"$n.tmp" ./"${n%.*zlib}" && rm -f "$n" ;;
    *.dmg)
      hdiutil mount ./"$n" -mountpoint "./$n.mounted"
      ;;
    *)
      echo "[e] Unknown archive: $n"
      return 1
      ;;
    esac
  done
}

# Follow the given log file, or cloud-init output if log file not given
taillog() {
  local log="${1:-"/var/log/cloud-init-output.log"}"
  if command -v lnav >/dev/null; then
    if [ -r "$log" ]; then
      lnav "$log"
    else
      sudo lnav "$log"
    fi
  else
    if [ -r "$log" ]; then
      tail --follow --verbose --lines=20 "$log"
    else
      sudo tail --follow --verbose --lines=20 "$log"
    fi
  fi
}

# List 20 biggest directories
usage() {
  du | sort -r -n |
    awk '{split("K M G",v); s=1; while($1>1024){$1/=1024; s++} \
      print int($1)" "v[s]"\t"$2}' | head -n 20
}

# Show process listening the given port
whatlistens() {
  local port="${1:-8080}"
  lsof -P -i :"$port" | column -t
}

# Generate password and copy it to clipboard
genpass() {
  local length="${1:-16}"
  tr </dev/urandom -dc 'a-zA-Z0-9-_!@#$%^&*()_+{}|:<>?=' |
    fold -w "$length" | head -n1 | pbcopy
}

# Remove all non-cask formulae
brewclear() {
  brew list --formula | xargs brew uninstall --ignore-dependencies --force
}

# Npm remove all global packages (except later npm installed via npm)
npmclear() {
  npm ls --location=global -p --depth=0 |
    awk -F/ '/node_modules/ && !/\/npm$/ {print $NF}' |
    xargs npm --location=global rm
}

# Gem remove all
gemclear() {
  gem uninstall -aIx
}

# Pip(x) remove all
pipclear() {
  command -v pipx >/dev/null && pipx uninstall-all
  pip freeze | grep -v "^-e" | cut -d "@" -f1 | xargs pip uninstall -y
}

### Latest version of Python command-line tools ################################

# cross-platform real-time monitoring
alias glances='pipx run "glances[action,browser,cloud,cpuinfo,docker,export,folders,gpu,graph,ip,raid,snmp,web,wifi]"'

# general media downloader
alias you-get='pipx run you-get'

# simplenote in terminal
alias sncli='pipx run sncli'

# jupyter notebooks in terminal
alias euporie='pipx run euporie'

# multitool for tabular data in terminal
alias vd='pipx run --pip-args openpyxl visidata'

# playwright
alias playwright='pipx run playwright'

# huggingface-cli
alias huggingface-cli='pipx run --spec huggingface-hub huggingface-cli'

# openai
alias openai='pipx run openai'

# aider
alias aider='pipx run aider-chat'

# gpt-engineer
alias gpt-engineer='pipx run gpt-engineer'

### Latest versions of global Node.js command-line tools #######################

# Find unused and missing package.json (dev)Dependencies
alias depcheck='npx -y depcheck'

# Upgrades your package.json dependencies to the latest version
alias ncu='npx -y npm-check-updates'

# project generator (uses bin/yarn)
alias projen='npx -y projen'

# Bump version and generate CHANGELOG.md
alias standard-version='npx -y standard-version'

# Identify technology on websites
alias wappalyzer='npx -y wappalyzer'

### Run nix in Docker ##########################################################

# nix.dev
nixd() {
  if [ -z "$1" ]; then
    local bin="bash"
  else
    local bin="$1"
    shift
  fi
  local name="n-${PWD##*/}"
  # do not docker run with --cap-drop ALL, or creating /nix/store fails
  docker start "$name" &>/dev/null ||
    (docker build --pull --tag "$name" "$HOME/local/etc/nix" &&
    docker run --init -it --detach \
    --name "$name" \
    --publish-all \
    --volume="$PWD:$PWD" \
    --workdir="$PWD" \
    "$name")
  docker exec -it --workdir="$PWD" "$name" "$bin" "$@"
}

alias nix='nixd nix'
alias nix-env='nixd nix-env'
alias nix-shell='nixd nix-shell'

# Generic nix-shell run
n() {
  [ -z "$1" ] && echo "Usage: $0 nix-pkg1[/nix-pkgN] [ARGUMENTS]" && return
  local packages="${1//\// }"
  # shellcheck disable=SC1001   # escape forward slash on purpose
  case "$1"
    in *\/*)
      shift
      local command="${packages%% *} $*"
      ;;
    *)
      local command="$*"
      ;;
  esac
  eval nix-shell --packages "$packages" --command \""$command"\"
}

# nixery.dev
nixery() {
  [ -z "$1" ] && echo "Usage: $0 nix-pkg1[/nix-pkgN] [ARGUMENTS]" && return
  local packages="$1"
  shift
  local bin="${packages%%/*}"
  if [ "$bin" = "shell" ]; then
    local command="bash -c \"$*\""
  else
    local command="$bin $*"
  fi
  if [ "$(uname -m)" = 'arm64' ] || [ "$(uname -m)" = 'aarch64' ]; then
    local image="nixery.dev/arm64/$packages"
  else
    local image="nixery.dev/$packages"
  fi
  eval nerdctl run --init -it --rm \
    --volume="$PWD:$PWD":rro,rprivate \
    --workdir="$PWD" \
    "$image" "$command"
}

### Run binaries in ad-hoc environments ########################################

# cloud
alias gcloud='nixery shell/google-cloud-sdk gcloud'

# databases
alias mysql='nixery shell/mariadb mysql'
alias psql='nixery shell/postgresql psql'
alias sqlmap='nixery sqlmap'

# decoders
alias fq='nixery fq'
alias hexyl='nixery hexyl'

# development
alias grex='nixery grex'
alias tokei='nixery tokei'
alias webanalyze='n webanalyze -update' # requires read-write file system

# load testing
alias k6='nixery k6'
alias oha='nixery oha'

# network
alias dog='nixery shell/dogdns dog'
alias naabu='nixery naabu'
alias nmap='nixery nmap'
alias rustscan='nixery rustscan'

# osint
alias amass='nixery amass'
alias maigret='nixery maigret'

# pentesting
alias hydra='nixery shell/thc-hydra hydra'
alias gobuster='nixery gobuster'
alias msfconsole='nixery shell/metasploit msfconsole'

# scanners
alias dalfox='nixery dalfox'
alias dnstwist='nixery dnstwist'
alias ffuf='nixery ffuf'
alias katana='nixery katana'
alias nikto='nixery nikto'
alias nuclei='nixery nuclei'
alias wapiti='nixery wapiti'

# miscellaneous
alias tickrs='nixery tickrs --show-x-labels --summary -c candle -s'
