#!/bin/bash
# the above shebang is purely for ShellCheck, this file is not executable

# shellcheck disable=SC2086  # not quoting args passed to nixery() docker run

### OS specific ################################################################

# Upgrade brew formulas, antidote and tmux plugins
alias br='command -v brew >/dev/null &&
  (brew update && brew upgrade ; brew autoremove) ;
  command -v antidote >/dev/null && antidote update ;
  [ -x "$HOME/.tmux/plugins/tpm/bin/update_plugins" ] &&
  $HOME/.tmux/plugins/tpm/bin/update_plugins all'

if [ "$(uname -s)" = 'Darwin' ]; then
  # Brew cask upgrade
  alias brc='brew cu --all --yes --no-quarantine --cleanup'

  # Install macOS application updates
  alias up='br ; brc'

  # Install macOS application and system updates
  alias dup='br ; brc ; softwareupdate --install --all'

  # Recursively delete .DS_Store files in the current path
  alias cleanupds='/usr/bin/find . -type f -name "*.DS_Store" -ls -delete'

  # Clean up LaunchServices to remove duplicates in "Open With" menues
  alias cleanupls='/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister \
    -kill -r -domain local -domain system -domain user &&
    killall Finder'

  # Mute or unmute sounds
  alias mute='osascript -e "set volume output muted true"'
  alias blast='osascript -e "set volume output muted false"'

  # Fix broken icons in Dock
  alias reseticons="sudo /usr/bin/find /private/var/folders/ \
    -name com.apple.dock.iconcache -exec rm {} \; ;
    sudo /usr/bin/find /private/var/folders/ -name com.apple.iconservices -exec rm -rf {} \; ;
    sudo rm -rf /Library/Caches/com.apple.iconservices.store ;
    sleep 3 ;
    killall Dock ;
    killall Finder"

  # Fix macOS keyboard input sources
  alias resetkeyboard="rm -f ~/Library/Preferences/com.apple.HIToolbox.plist ;
    sudo rm -f /Library/Preferences/com.apple.HIToolbox.plist"

  # Disable or enable Spotlight (indexing)
  alias spotoff='sudo mdutil -a -i off'
  alias spoton='sudo mdutil -a -i on'

  # Canonical hex dump; some systems have this symlinked
  command -v hd >/dev/null || alias hd='hexdump -C'

  # macOS has no `md5sum`, use `md5` as a fallback
  command -v md5sum >/dev/null || alias md5sum='md5'

  # macOS has no `sha1sum`, use `shasum` as a fallback
  command -v sha1sum >/dev/null || alias sha1sum='shasum'
else
  if command -v apt >/dev/null; then
    alias up='sudo apt update &&
      sudo apt upgrade -y && sudo apt autoremove -y && sudo apt clean ;
      br'
    alias dup='sudo apt update &&
      sudo apt full-upgrade -y && sudo apt autoremove -y && sudo apt clean ;
      br'
  elif command -v yum >/dev/null; then
    alias up='sudo yum update -y --exclude=kernel* && sudo yum autoremove -y ;
      br'
    alias dup='sudo yum update -y && sudo yum autoremove -y ;
      br'
  elif command -v yay >/dev/null; then
    alias up='yay --noconfirm -Suy &&
      yay -Qdtq | yay --noconfirm -Rs - ;
      br'
    alias dup='up'
  elif command -v pacman >/dev/null; then
    alias up='sudo pacman --noconfirm -Suy &&
      sudo pacman -Qdtq | sudo pacman --noconfirm -Rs - ;
      br'
    alias dup='up'
  elif command -v apk >/dev/null; then
    alias up='sudo apk update &&
      sudo apk add --upgrade apk-tools &&
      sudo apk upgrade ;
      br'
    alias dup='up'
  fi

  # Similar to macOS `pbcopy` and `pbpaste`
  alias pbcopy='xsel --clipboard --input'
  alias pbpaste='xsel --clipboard --output'

  # Similar to macOS `open`
  alias open='xdg-open'
fi

### More sensible defaults #####################################################

alias code='code --reuse-window --add'

alias grep='grep --color'
alias egrep='egrep --color'
alias fgrep='fgrep --color'

alias ping='ping -c 999'

### Safer defaults #############################################################

alias chown='chown --preserve-root'
alias chmod='chmod --preserve-root'
alias chgrp='chgrp --preserve-root'

### Enhanced ls ################################################################

if command -v lsd >/dev/null; then
  alias ls='lsd --group-dirs first --date="+%a %d-%b-%y %H:%M:%S" --icon never'
  alias la='ls -Al'
  alias le='ls -Al --extensionsort && echo Ordered by extension, alphabetically'
  alias lu='ls -Al --sizesort && echo Ordered by size, biggest first'
  alias lt='ls -Al --timesort && echo Ordered by change time, most recent first'
  alias lut='ls -Al --sizesort --total-size --tree --depth 2'
else
  alias ls='ls --color -h'
  alias la='ls -Al'
  alias le='ls -Al -XB && echo Ordered by extension, alphabetically'
  alias lu='ls -Al -S && echo Ordered by size, biggest first'
  alias lt='ls -Al -tc && echo Ordered by change time, most recent first'
fi

### Shortcuts ##################################################################

alias a='rg --smart-case --no-ignore --hidden --glob "!.git/"'
alias b='bat --theme=base16'
alias c='kalker'
# d is for generic docker build and run, see d()
alias e='sgpt_execute'
alias f='fd --ignore-case --no-ignore --hidden'
alias g='gitui'
alias h='xh'
alias i='glances'
# j is for zoxide
alias k='kubectl'
alias l='la'
# m is for m-cli
alias n='nixery'
alias o='open'
alias p='procs --tree --watch-interval 1'
alias q='clear'
# r is for reloading shell's configuration (alias is in shell specific rc files)
alias s='sncli'
alias t='taillog'
alias u='diskonaut'
alias v='limactl'
alias w='which -a'
alias x='pkill -i -f'
alias y='cht.sh'
alias z='whatlistens'
alias §='got -o -s en -t fi'
alias ≤='got -o -s fi -t en'
alias ¨='bat --show-all'
alias ,='sgpt_chat'
alias _='sgpt_code'

### watch ######################################################################

command -v viddy >/dev/null && alias watch='viddy --differences'

### jq #########################################################################

command -v gojq >/dev/null && alias jq='gojq'

### vim ########################################################################

command -v nvim >/dev/null && alias vim='nvim'

### Lima VMs ###################################################################

alias vm4rancher="limactl start \$HOME/local/etc/lima/rancher.yaml \
  --tty=false ;
  export KUBECONFIG=\$HOME/.lima/rancher/kubeconfig.yaml ;
  limactl shell rancher sudo cat /etc/rancher/k3s/k3s.yaml > \$KUBECONFIG ;
  kubectl get nodes"

alias vm4ubuntu="limactl start \$HOME/local/etc/lima/ubuntu.yaml --tty=false"
alias vm4debian="limactl start \$HOME/local/etc/lima/debian.yaml --tty=false"

alias vm4alma="limactl start \$HOME/local/etc/lima/almalinux.yaml --tty=false"
alias vm4centos="limactl start \$HOME/local/etc/lima/centos.yaml --tty=false"
alias vm4fedora="limactl start \$HOME/local/etc/lima/fedora.yaml --tty=false"
alias vm4rocky="limactl start \$HOME/local/etc/lima/rocky.yaml --tty=false"
alias vm4oracle="limactl start \$HOME/local/etc/lima/oraclelinux.yaml --tty=false"

alias vm4arch="limactl start \$HOME/local/etc/lima/archlinux.yaml --tty=false"
alias vm4alpine="limactl start \$HOME/local/etc/lima/alpine.yaml --tty=false"

### Docker #####################################################################

alias drmc='docker rm --force $(docker ps --all --quiet)'
alias drmv='docker volume rm --force $(docker volume ls --quiet)'
alias drmi='docker rmi --force $(docker images --all --quiet)'
alias dpr='drmc ; drmv ; drmi ; docker system prune --force --volumes'

# https://github.com/sigoden/dufs
alias dufs='docker run --init -it \
  --cap-drop ALL \
  -p 80:80 \
  -v $(pwd):/data \
  sigoden/dufs \
  /data -p 80'

# https://github.com/microsoft/Oryx
alias oryx='docker run --init -it \
    --cap-drop ALL \
    -v $(pwd):/repo \
    mcr.microsoft.com/oryx/build \
    oryx build /repo --output /repo'

### nerdctl ####################################################################

alias nrmc='nerdctl rm --force $(nerdctl ps --all --quiet)'
alias nrmv='nerdctl volume rm --force $(nerdctl volume ls --quiet)'
alias nrmi='nerdctl rmi $(nerdctl images --all --quiet)'
alias npr='nrmc ; nrmv ; nrmi'

alias netdata='nerdctl run -d --name=netdata \
  -p 19999:19999 \
  -v netdataconfig:/etc/netdata \
  -v netdatalib:/var/lib/netdata \
  -v netdatacache:/var/cache/netdata \
  -v /etc/passwd:/host/etc/passwd:ro \
  -v /etc/group:/host/etc/group:ro \
  -v /proc:/host/proc:ro \
  -v /sys:/host/sys:ro \
  -v /etc/os-release:/host/etc/os-release:ro \
  --cap-add SYS_PTRACE \
  --security-opt apparmor=unconfined \
  netdata/netdata'

### Misc #######################################################################

# Copy the current path to clipboard
alias cwd='pwd | tr -d "\n" | pbcopy'

# Public IP
alias ip='curl --silent --ipv4 https://ifconfig.co/json | jq .'
alias ipv6='curl --silent --ipv6 https://ifconfig.co/ip'

# Display PATH content
alias path='printf "${PATH//:/\\n}\n"'

# Enable aliases to be sudo’ed
alias sudo='sudo '

# Get the week number
alias week='date +%V'

### Utilities ##################################################################

# ChatGPT helpers
sgpt() {
  pipx run --spec=shell-gpt sgpt --no-spinner --no-cache "$@"
}

sgpt_chat() {
  sgpt --chat "$(date +"%Y-%m-%d"):chat$TMUX_PANE" "$*"
}

sgpt_code() {
  sgpt --temperature 0 --chat "$(date +"%Y-%m-%d"):code$TMUX_PANE" --code "$*"
}

sgpt_execute() {
  sgpt --temperature 0 --shell --execute "$*"
}

# Generic docker build and run
d() {
  # shellcheck disable=SC2155  # will not declare separately, value compactness
  local name="$(echo "${PWD##*/}" | tr '[:upper:]' '[:lower:]')"
  if docker top "$name" &>/dev/null ; then
    docker stop "$name" || docker kill "$name"
  fi
  [ -r "$PWD/.env" ] && local env_file="--env-file $PWD/.env"
  local run_args="$*"
  docker build --pull --tag "$name" . &&
  docker run --init -it --detach --name "$name" --rm \
    --cap-drop ALL \
    --publish-all \
    $env_file \
    $run_args \
    "$name" &&
  docker port "$name"
}

# Quick extract
ext() {
  if [ -r "$1" ]; then
    if command -v unar >/dev/null; then
      unar "$1"
    else
      case $1 in
        *.tar.bz2) tar xvjf "$1" ;;
        *.tar.gz) tar xvzf "$1" ;;
        *.bz2) bunzip2 "$1" ;;
        *.rar) unrar x "$1" ;;
        *.gz) gunzip "$1" ;;
        *.tar) tar xvf "$1" ;;
        *.tbz2) tar xvjf "$1" ;;
        *.tgz) tar xvzf "$1" ;;
        *.zip) unzip "$1" ;;
        *.Z) uncompress "$1" ;;
        *.7z) 7z x "$1" ;;
        *) echo "don't know how to extract '$1'..." ;;
      esac
    fi
  else
    echo "'$1' is not a valid file!"
  fi
}

# Follow the given log file, or cloud-init output if log file not given
taillog() {
  local log="${1:-"/var/log/cloud-init-output.log"}"
  if command -v lnav >/dev/null; then
    if [ -r "$log" ]; then
      lnav "$log"
    else
      sudo lnav "$log"
    fi
  else
    if [ -r "$log" ]; then
      tail --follow --verbose --lines=20 "$log"
    else
      sudo tail --follow --verbose --lines=20 "$log"
    fi
  fi
}

# List 20 biggest directories
usage() {
  du | sort -r -n |
    awk '{split("K M G",v); s=1; while($1>1024){$1/=1024; s++} \
      print int($1)" "v[s]"\t"$2}' | head -n 20
}

# Show process listening the given port
whatlistens() {
  local port="${1:-8080}"
  lsof -P -i :"$port" | column -t
}

# Generate password and copy it to clipboard
genpass() {
  local length="${1:-16}"
  tr </dev/urandom -dc 'a-zA-Z0-9-_!@#$%^&*()_+{}|:<>?=' |
    fold -w "$length" | head -n1 | pbcopy
}

# Remove all non-cask formulae
brewclear() {
  brew list --formula | xargs brew uninstall --ignore-dependencies --force
}

# Npm remove all global packages (except later npm installed via npm)
npmclear() {
  npm ls --location=global -p --depth=0 |
    awk -F/ '/node_modules/ && !/\/npm$/ {print $NF}' |
    xargs npm --location=global rm
}

# Gem remove all
gemclear() {
  gem uninstall -aIx
}

# Pip(x) remove all
pipclear() {
  command -v pipx >/dev/null && pipx uninstall-all
  pip freeze | grep -v "^-e" | cut -d "@" -f1 | xargs pip uninstall -y
}

# Recursively remove __pycache__ directories
pyclean() {
  find . -type d -name "__pycache__" -exec rm -r {} +
}

### Latest version of Python command-line tools ################################

# cross-platform monitoring
alias glances='pipx run "glances[action,browser,cloud,cpuinfo,docker,export,folders,gpu,graph,ip,raid,snmp,web,wifi]"'

# Simplenote CLI
alias sncli='pipx run sncli'

# general media downloader
alias you-get='pipx run you-get'

# multitool for tabular data
alias vd='pipx run --pip-args openpyxl visidata'

# Jupyter
alias euporie='pipx run euporie'
alias jupytext='pipx run jupytext'

# image inpainting tool
alias lama-cleaner='pipx run lama-cleaner --model=lama --device=cpu --port=8080'

# openai
alias openai='pipx run openai'

# huggingface-cli
alias huggingface-cli='pipx run --spec huggingface-hub huggingface-cli'

# playwright
alias playwright='pipx run playwright'

### Latest versions of global Node.js command-line tools #######################

# Find unused and missing package.json (dev)Dependencies
alias depcheck='npx -y depcheck'

# Command-line JSON processing tool
alias fx='npx -y fx'

# Upgrades your package.json dependencies to the latest version
alias ncu='npx -y npm-check-updates'

# GPT CLI to generate commit messages
alias oc='npx -y opencommit'

# project generator (uses bin/yarn)
alias projen='npx -y projen'

# Bump version and generate CHANGELOG.md
alias standard-version='npx -y standard-version'

# Identify technology on websites
alias wappalyzer='npx -y wappalyzer'

### Run nix in Docker ##########################################################

# nix.dev
nixd() {
  local name="${PWD##*/}"
  if [ -z "$1" ] ; then
    local args="bash"
  else
    local args="$*"
  fi
  docker start "$name" &>/dev/null || docker run --init -it --detach \
    --name "$name" \
    --publish-all \
    --volume="$PWD:$PWD" \
    --workdir="$PWD" \
    nixos/nix
  docker exec -it --workdir="$PWD" "$name" $args
}

alias nix='nixd nix'
alias nix-env='nixd nix-env'
alias nix-shell='nixd nix-shell'

devbox() {
  local args="$*"
  if nixd [ ! -x /bin/bash ] ; then
    nixd ln -s /root/.nix-profile/bin/bash /bin/bash
  fi
  if nixd [ ! -x /usr/local/bin/devbox ]; then
    nixd curl -fsSL https://get.jetpack.io/devbox -o /tmp/devbox_install
    nixd chmod +x /tmp/devbox_install
    nixd /tmp/devbox_install --force
    nixd ln -s /usr/local/bin/devbox /root/.nix-profile/bin/devbox
  fi
  nixd devbox $args
}

### Binaries within Docker built dynamically by nixery #########################

# nixery.dev
nixery() {
  [ -z "$1" ] && echo "Usage: $0 nix-pkg1[/nix-pkgN] [COMMAND]" && return
  local pkgs="$1"
  shift
  local args="${*:-$pkgs}"
  if [ "$(uname -m)" = 'arm64' ] || [ "$(uname -m)" = 'aarch64' ]; then
    image="nixery.dev/arm64/shell/$pkgs"
  else
    image="nixery.dev/shell/$pkgs"
  fi
  docker run --init -it --rm --name "${pkgs//\//-}" \
    --publish-all \
    --volume="$PWD:$PWD":ro \
    --workdir="$PWD" \
    "$image" $args
}

alias amass='nixery amass amass'
alias chain-bench='nixery chain-bench chain-bench'
alias dalfox='nixery dalfox dalfox'
alias dnstwist='nixery dnstwist dnstwist'
alias dog='nixery dogdns dog'
alias ffuf='nixery ffuf ffuf'
alias gobuster='nixery gobuster gobuster'
alias hydra='nixery thc-hydra hydra'
alias k6='nixery k6 k6'
alias msfconsole='nixery metasploit msfconsole'
alias naabu='nixery naabu naabu'
alias nikto='nixery nikto nikto'
alias nmap='nixery nmap nmap'
alias nuclei='nixery nuclei nuclei'
alias oha='nixery oha oha'
alias rustscan='nixery rustscan rustscan'
alias sqlmap='nixery sqlmap sqlmap'
alias tickrs='nixery tickrs tickrs --show-x-labels --summary -c candle -s'
alias wapiti='nixery wapiti wapiti'

### macOS keychain #############################################################

if [ "$(uname -s)" = 'Darwin' ]; then
  get_keychain_variable() {
    local name="$1"
    [ -z "$name" ] && echo "Usage: get_keychain_variable <varname>" && return 1
    security find-generic-password -w \
      -a "$USER" -D "environment variable" -s "$name"
  }

  set_keychain_variable() {
    local name="$1"
    [ -z "$name" ] && echo "Usage: set_keychain_variable <varname>" && return 1
    printf "Enter secret for %s: " "$name"
    read -r secret
    [ -z "$secret" ] && echo "Error: Empty secret" && return 1
    security add-generic-password -U \
      -a "$USER" -D "environment variable" -s "$name" -w "$secret"
  }
fi
