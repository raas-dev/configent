#!/bin/bash
# the above shebang is only for ShellCheck, this file is not executable

### Upgrade for all package managers ###########################################

# shellcheck disable=SC2139  # ok to expand variable read-time, not run-time
skipped_managers="containers helm vim"
alias up="topgrade --yes --no-retry --disable system restarts $skipped_managers"
alias dup="topgrade --yes --no-retry --disable $skipped_managers"

### OS specific ################################################################

if [ "$(uname -s)" = 'Darwin' ]; then
  # Recursively delete .DS_Store files in the current path
  alias cleanupds='/usr/bin/find . -type f -name "*.DS_Store" -ls -delete'

  # Clean up LaunchServices to remove duplicates in "Open With" menues
  alias cleanupls='/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister \
    -kill -r -domain local -domain system -domain user &&
    killall Finder'

  # Fix broken icons in Dock
  alias reseticons="sudo /usr/bin/find /private/var/folders/ \
    -name com.apple.dock.iconcache -exec rmv {} \; ;
    sudo /usr/bin/find /private/var/folders/ -name com.apple.iconservices -exec rm -rfv {} \; ;
    sudo rm -rfv /Library/Caches/com.apple.iconservices.store ;
    sleep 3 ;
    killall Dock ;
    killall Finder"

  # Fix macOS keyboard input sources
  alias resetkeyboard="rm -fv ~/Library/Preferences/com.apple.HIToolbox.plist ;
    sudo rm -fv /Library/Preferences/com.apple.HIToolbox.plist"

  # Get macOS keyboard layout name
  alias kb="defaults read ~/Library/Preferences/com.apple.HIToolbox.plist AppleSelectedInputSources | grep 'KeyboardLayout Name' | cut -f 2 -d '=' | tr -d ' ;.\"'"

  # Disable or enable Spotlight (indexing)
  alias spotoff='sudo mdutil -a -i off'
  alias spoton='sudo mdutil -a -i on'

  # Canonical hex dump; some systems have this symlinked
  ! command -v hd >/dev/null && alias hd='hexdump -C'

  # macOS keychain
  get_keychain_variable() {
    local name="$1"
    [ -z "$name" ] && echo "Usage: get_keychain_variable <varname>" && return 1
    security find-generic-password -w \
      -a "$USER" -D "environment variable" -s "$name"
  }

  set_keychain_variable() {
    local name="$1"
    [ -z "$name" ] && echo "Usage: set_keychain_variable <varname>" && return 1
    printf "Enter secret for %s: " "$name"
    read -r secret
    [ -z "$secret" ] && echo "Error: Empty secret" && return 1
    security add-generic-password -U \
      -a "$USER" -D "environment variable" -s "$name" -w "$secret"
  }
else
  # Similar to macOS `pbcopy` and `pbpaste`
  alias pbcopy='xsel --clipboard --input'
  alias pbpaste='xsel --clipboard --output'

  # Similar to macOS `open`
  alias open='xdg-open'
fi

### More sensible defaults #####################################################

if command -v codium >/dev/null; then
  alias code='codium --reuse-window --add'
elif command -v code >/dev/null; then
  alias code='code --reuse-window --add'
fi
alias cursor='cursor --reuse-window --add'

alias grep='grep --color'
alias egrep='egrep --color'
alias fgrep='fgrep --color'

alias ping='ping -c 999'

### Safer defaults #############################################################

alias chown='chown --preserve-root'
alias chmod='chmod --preserve-root'
alias chgrp='chgrp --preserve-root'
# rm: --preserve-root is default

### Enhanced ls ################################################################

if command -v lsd >/dev/null; then
  alias ls='lsd --group-dirs first --date="+%a %d-%b-%y %H:%M:%S" --icon never'
  alias la='ls -Al'
  alias le='ls -Al --extensionsort && echo Ordered by extension, alphabetically'
  alias lu='ls -Al --sizesort && echo Ordered by size, biggest first'
  alias lt='ls -Al --timesort && echo Ordered by change time, most recent first'
  alias lut='ls -Al --sizesort --total-size --tree --depth 2'
else
  alias ls='ls --color -h'
  alias la='ls -Al'
  alias le='ls -Al -XB && echo Ordered by extension, alphabetically'
  alias lu='ls -Al -S && echo Ordered by size, biggest first'
  alias lt='ls -Al -tc && echo Ordered by change time, most recent first'
fi

### Shortcuts ##################################################################

alias a='aichat'
alias b='bat --style=grid,header-filename,numbers,snip'
alias c='ai'
# d is for generic docker build and run, see d()
# e is for generic extract package, see e()
alias f='fd --ignore-case --no-ignore --hidden'
alias g='gitui'
alias h='xh --verify=no'
alias i='glances'
# j is for zoxide
alias k='kalker'
alias l='la'
# m is for m-cli
# n is for ad-hoc nix-shell in docker, see n()
alias o='open'
alias p='procs --tree --watch-interval 1'
alias q='clear'
alias r='exec $SHELL'
alias s='rg --smart-case --no-ignore --hidden --glob "!.git/"'
alias t='taillog'
alias u='diskonaut'
alias v='limactl'
alias w='which -a'
alias x='pkill -i -f'
alias y='tldr'
alias z='whatlistens'
alias ¨='bat --show-all --theme=default'
alias §='trans :fi'
alias ,='trans'
alias _='ai_agent'

### watch ######################################################################

command -v hwatch >/dev/null && alias watch='hwatch --differences word'

### Lima VMs ###################################################################

alias vm4ubuntu="limactl start --name ubuntu ~/.config/configent/lima/ubuntu.yaml --tty=false"
alias vm4debian="limactl start --name debian ~/.config/configent/lima/debian.yaml --tty=false ;
  export KUBECONFIG=~/.lima/default/kubeconfig.yaml ;
  kubectl get nodes"

alias vm4fedora="limactl start --name fedora ~/.config/configent/lima/fedora.yaml --tty=false"
alias vm4centos="limactl start --name centos ~/.config/configent/lima/centos.yaml --tty=false"

alias vm4alma="limactl start --name almalinux ~/.config/configent/lima/almalinux.yaml --tty=false"
alias vm4rocky="limactl start --name rocky ~/.config/configent/lima/rocky.yaml --tty=false"
alias vm4oracle="limactl start --name oraclelinux ~/.config/configent/lima/oraclelinux.yaml --tty=false"

alias vm4suse="limactl start --name opensuse ~/.config/configent/lima/opensuse.yaml --tty=false"
alias vm4arch="limactl start --name archlinux ~/.config/configent/lima/archlinux.yaml --tty=false"
alias vm4alpine="limactl start --name alpine ~/.config/configent/lima/alpine.yaml --tty=false"

### docker #####################################################################

alias dr='docker rm --force $(docker ps --all --quiet)'
alias drv='docker volume rm --force $(docker volume ls --quiet)'
alias dri='docker rmi --force $(docker images --all --quiet)'
alias dpr='dr ; drv ; dri ; docker system prune --force --volumes'

### containerd #################################################################

alias nr='nerdctl rm --force $(nerdctl ps --all --quiet)'
alias nrv='nerdctl volume rm --force $(nerdctl volume ls --quiet)'
alias nri='nerdctl rmi --force $(nerdctl images --all --quiet)'
alias npr='nr ; nrv ; nri ; nerdctl system prune --force --volumes'

### Utilities ##################################################################

# cd
alias cdtemp="cd $(mktemp -d)"

# Typos
alias dc='cd'
alias gti='git'

# Copy the current path to clipboard
alias cwd='pwd | tr -d "\n" | pbcopy'

# Display public IP
alias ip='curl --silent --ipv4 https://ifconfig.co/json | jq .'
alias ipv6='curl --silent --ipv6 https://ifconfig.co/ip'

# Display PATH content
alias path='printf "${PATH//:/\\n}\n"'

# Enable aliases to be sudo’ed
alias sudo='sudo '

# Display week number
alias week='date +%V'

# Weather (https://github.com/chubin/wttr.in)
alias wttr='curl "v2.wttr.in/$(ip | jq -r .city)?MF&lang=en"'

### Python #####################################################################

# Cross-platform real-time monitoring
alias glances='uvx --from "glances[containers,gpu,ip,web,wifi]" glances'

# View, tail, merge, and search log files (plus JSONL)
alias tl='uvx --from toolong tl'

# Reactive notebook
alias marimo='uvx marimo'

# SQL IDE for terminal
alias harlequin='uvx --from "harlequin[mysql,postgres]" harlequin --theme lightbulb'

# Multitool for tabular data in terminal
alias vd='uvx --with openpyxl visidata'

# Simplenote in terminal (export SN_USERNAME and SN_PASSWORD in ~/.rclocal)
# workaround: use Python 3.11.x because sncli requires distutils (2024-09)
alias sncli='uvx --python 3.11 sncli'

# Playwright
alias playwright='uvx playwright'

# General media downloader
alias you-get='uvx you-get'

# Checkov
alias checkov='uvx checkov'

# GuardDog
alias guarddog='uvx guarddog'

# gptme
alias gptme='uvx --from "gptme[browser]" gptme'
alias gptme-server='uvx --with flask --from "gptme[browser]" gptme-server'

# Huggingface CLI
alias huggingface-cli='uvx --from huggingface-hub huggingface-cli'

# OpenAI CLI
alias openai='uvx openai'

# Command-line utility for rendering projects templates
alias copier='uvx --with copier-templates-extensions copier'

# https://hatch.pypa.io/latest
alias hatch='uvx hatch'

# Langflow
alias langflow='uvx langflow'

# Toggle a Python virtual environment for development
venv() {
  # shellcheck disable=SC1091  # activate does not exist unless venv is created
  if [ -z "$VIRTUAL_ENV" ]; then
    [ ! -d ".venv" ] && uv venv --seed # python -m venv .venv
    source ".venv/bin/activate"
    sitepackages_path="$(python -c 'import sysconfig; print(sysconfig.get_paths()["purelib"])')"
    ln -sfnv "$HOME/.config/configent/python/sitecustomize.py" \
      "$sitepackages_path/sitecustomize.py"
    uv pip install rich # python -m pip install rich
    if [ -r "pdm.lock" ] && command -v pdm >/dev/null; then
      pdm install
    elif [ -r "poetry.lock" ] && command -v poetry >/dev/null; then
      ! poetry check &>/dev/null && poetry lock
      poetry install
    elif [ -r "uv.lock" ] && [ -r "pyproject.toml" ]; then
      # inexact: do not remove extraneous packages unless they conflict
      uv sync --inexact --all-extras
      uv pip install --editable .
    else
      # no lockfile, do not create one either
      # prioritize requirements.txt as it most likely has pinned dependencies
      if [ -r "requirements.txt" ]; then
        uv pip install -r requirements.txt
      elif [ -r "pyproject.toml" ]; then
        uv pip install --all-extras -r pyproject.toml
      elif [ -r "setup.py" ]; then
        uv pip install --all-extras -r setup.py
      fi
      if [ -r "pyproject.toml" ] || [ -r "setup.py" ]; then
        uv pip install --editable .
      fi
    fi
  else
    deactivate # && [ -d ".venv" ] && rm -rv ".venv"
  fi
}

### Node.js ####################################################################

# Flowise
alias flowise='npx -y flowise'

# Azure Functions CLI
alias func='npx -y azure-functions-core-tools'

# Firebase CLI
alias firebase='npx -y firebase-tools'

# Railway.app CLI
alias railway='npx -y @railway/cli'

# Cloudflare Workers CLI
alias wrangler='npx -y wrangler'

# Find unused and missing package.json (dev)Dependencies
alias depcheck='npx -y depcheck'

# Upgrades your package.json dependencies to the latest version
alias ncu='npx -y npm-check-updates'

# Yet another package manager
alias pnpm='npx -y pnpm'

# Project generator (requires bin/yarn shim)
alias projen='npx -y projen'

# Bump version and generate CHANGELOG.md
alias standard-version='npx -y standard-version'

# Packs entire repository into a single, AI-friendly file
alias repomix='npx -y repomix'

### Functions: AI ##############################################################

# add to ~/.rclocal:
# export OPENAI_API_KEY='sk-xxxxxx'
# export <PROVIDER>_API_KEY='sk-xxxxxx'
ai() {
  local role="chat"
  [ -n "$1" ] && role="chat#$1"
  aichat --role "$role" --session "$(date +"%Y-%m-%d"):$role"
}

ai_agent() {
  local project="${PWD##*/}"
  gptme --system short --name "$(date +"%Y-%m-%d"):$project" "$@"
}

### Functions: Docker ##########################################################

# Generic docker build and run
d() {
  # lowercase the image name to allow pushing it to container registries
  # shellcheck disable=SC2155  # will not declare separately, value compactness
  local name="$(echo "${PWD##*/}" | tr '[:upper:]' '[:lower:]')"
  if docker top "$name" &>/dev/null; then
    docker stop "$name" || docker kill "$name"
  fi

  if [ -r "$PWD/Dockerfile" ]; then
    echo "[d] Building image from Dockerfile"
    docker build --pull --tag "$name" . || return
  else
    echo "[d] Building image with nixpacks"
    TMPDIR="/tmp/lima" nixpacks build . --name "$name" || return
  fi

  if [ -n "$PORT" ]; then
    local port_args="--publish 127.0.0.1:$PORT:$PORT"
    local env_args="--env PORT=$PORT"
  fi

  [ -r "$PWD/.env" ] && local env_file="--env-file $PWD/.env"

  if [ -n "$1" ] && [ "$1" != "-d" ] && [ "$1" != "--detach" ]; then
    local run_args="--log-driver none --entrypoint /bin/sh"
    local cmd="-c '$*'"
  else
    local run_args="$*"
  fi

  eval docker run --init -it --name "$name" --rm \
    --cap-drop ALL \
    "$port_args" \
    "$env_file" \
    "$env_args" \
    "$run_args" \
    "$name" "$cmd"

  local run_exit_code=$?

  if [ "$run_args" = "-d" ] || [ "$run_args" = "--detach" ]; then
    echo "[d] Published ports: container -> host"
    docker port "$name"
    echo "[d] Following logs, ^C does not halt the container"
    docker logs --follow "$name"
  fi

  return $run_exit_code
}

### Functions: Utilities #######################################################

# Generic extract package
e() {
  # Forked from: https://github.com/xvoland/Extract/blob/master/extract.sh
  if [ $# -eq 0 ]; then
    echo "Usage: e <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz|.zlib|.cso>"
    echo "       e <path/file_name_1.ext> [path/file_name_2.ext] [path/file_name_3.ext]"
  fi

  for n in "$@"; do
    if [ ! -f "$n" ]; then
      echo "[e] File does not exist: $n"
      return 1
    fi

    case "${n%,}" in
    *.cbt | *.tar.bz2 | *.tar.gz | *.tar.xz | *.tbz2 | *.tgz | *.txz | *.tar)
      tar zxvf "$n"
      ;;
    *.lzma) unlzma ./"$n" ;;
    *.bz2) bunzip2 ./"$n" ;;
    *.cbr | *.rar) unrar x -ad ./"$n" ;;
    *.gz) gunzip ./"$n" ;;
    *.cbz | *.epub | *.zip) unzip ./"$n" ;;
    *.z) uncompress ./"$n" ;;
    *.7z | *.apk | *.arj | *.cab | *.cb7 | *.chm | *.deb | *.iso | *.lzh | *.msi | *.pkg | *.rpm | *.udf | *.wim | *.xar | *.vhd)
      7z x ./"$n"
      ;;
    *.xz) unxz ./"$n" ;;
    *.exe) cabextract ./"$n" ;;
    *.cpio) cpio -id <./"$n" ;;
    *.cba | *.ace) unace x ./"$n" ;;
    *.zpaq) zpaq x ./"$n" ;;
    *.arc) arc e ./"$n" ;;
    *.cso) ciso 0 ./"$n" ./"$n.iso" &&
      extract "$n.iso" && \rm -f "$n" ;;
    *.zlib) zlib-flate -uncompress <./"$n" >./"$n.tmp" &&
      mv ./"$n.tmp" ./"${n%.*zlib}" && rm -f "$n" ;;
    *.dmg)
      hdiutil mount ./"$n" -mountpoint "./$n.mounted"
      ;;
    *)
      echo "[e] Unknown archive: $n"
      return 1
      ;;
    esac
  done
}

# Follow the given log file, or cloud-init output if log file is not given
taillog() {
  local log="${1:-"/var/log/cloud-init-output.log"}"
  if command -v lnav >/dev/null; then
    if [ -r "$log" ]; then
      lnav "$log"
    else
      sudo lnav "$log"
    fi
  else
    if [ -r "$log" ]; then
      tail --follow --verbose --lines=20 "$log"
    else
      sudo tail --follow --verbose --lines=20 "$log"
    fi
  fi
}

# List 20 biggest subdirectories
usage() {
  du | sort -r -n |
    awk '{split("K M G",v); s=1; while($1>1024){$1/=1024; s++} \
      print int($1)" "v[s]"\t"$2}' | head -n 20
}

# Show what listens on port(s)
whatlistens() {
  local filter=
  [ -n "$1" ] && filter=":$1"
  lsof -P -iTCP"$filter" -sTCP:LISTEN +c0
}

# Generate password and copy it to clipboard
genpass() {
  local length="${1:-16}"
  tr </dev/urandom -dc 'a-zA-Z0-9-_!@#$%^&*()_+{}|:<>?=' |
    fold -w "$length" | head -n1 | pbcopy
}

### Functions: Cleaners ########################################################

# Npm remove all global packages (except later npm installed via npm)
npmclear() {
  npm ls --location=global -p --depth=0 |
    awk -F/ '/node_modules/ && !/\/npm$/ {print $NF}' |
    xargs npm --location=global rm
}

# Gem remove all
gemclear() {
  gem uninstall -aIx
}

# Pip(x) remove all
pipclear() {
  command -v uv >/dev/null && uv tool uninstall --all
  command -v pipx >/dev/null && pipx uninstall-all
  pip freeze | grep -v "^-e" | cut -d "@" -f1 | xargs pip uninstall -y
}

# Remove all non-cask formulae
brewclear() {
  printf "Are you sure to remove all Homebrew formulae [y\N] > "
  read -r choice
  case "$choice" in
  [yY])
    brew list --formula | xargs brew uninstall --ignore-dependencies --force
    ;;
  *)
    printf "Aborted.\n"
    ;;
  esac
}

# Remove all VSCodium extensions
codiumclear() {
  printf "Are you sure to remove all VSCodium extensions [y\N] > "
  read -r choice
  case "$choice" in
  [yY])
    codium --list-extensions | while read -r extension; do
      codium --force --uninstall-extension "$extension"
    done
    ;;
  *)
    printf "Aborted.\n"
    ;;
  esac
}

# Remove all Cursor extensions
cursorclear() {
  printf "Are you sure to remove all Cursor extensions [y\N] > "
  read -r choice
  case "$choice" in
  [yY])
    cursor --list-extensions | while read -r extension; do
      cursor --force --uninstall-extension "$extension"
    done
    ;;
  *)
    printf "Aborted.\n"
    ;;
  esac
}

# Remove all VSCode extensions
codeclear() {
  printf "Are you sure to remove all VSCode extensions [y\N] > "
  read -r choice
  case "$choice" in
  [yY])
    code --list-extensions | while read -r extension; do
      code --force --uninstall-extension "$extension"
    done
    ;;
  *)
    printf "Aborted.\n"
    ;;
  esac
}

### Nix ########################################################################

# Nix in containerd
nixd() {
  if [ -z "$1" ]; then
    local bin="bash"
  else
    local bin="$1"
    shift
  fi
  local image="nix"
  local name="$image-${PWD##*/}"

  if [ -n "$PORT" ]; then
    local port_args="--publish 127.0.0.1:$PORT:$PORT"
    local env_args="--env PORT=$PORT"
  fi

  #[ -r "$PWD/.env" ] && local env_file="--env-file $PWD/.env"

  nerdctl start "$name" &>/dev/null ||
    (nerdctl build --tag "$image" ~/configent/etc/nix &&
      eval nerdctl run --init -t --detach \
        --name "$name" \
        "$port_args" \
        --volume "$PWD:$PWD" \
        --workdir "$PWD" \
        "$image")
  eval nerdctl exec -it \
    "$env_file" \
    "$env_args" \
    --workdir "$PWD" \
    "$name" "$bin" "$*"
}

# Generic nix-shell builder and runner
n() {
  [ -z "$1" ] && echo "Usage: $0 nix-pkg1[/nix-pkgN] [ARGUMENTS]" && return
  local packages="${1//\// }"
  # shellcheck disable=SC1001   # escape forward slash on purpose
  case "$1" in shell*)
    shift
    local packages="${packages#* }"
    local command="bash -c '$*'"
    ;;
  *\/*)
    shift
    local bin="${packages%% *}"
    local command="$bin $*"
    ;;
  *)
    local command="$*"
    ;;
  esac
  # shellcheck disable=SC2086   # command has to be in quotes
  nixd nix-shell --packages "$packages" --command \"$command\"
}

# https://nixery.dev/
nixery() {
  [ -z "$1" ] && echo "Usage: $0 nix-pkg1[/nix-pkgN] [ARGUMENTS]" && return
  local packages="$1"
  shift
  local bin="${packages%%/*}"
  if [ "$bin" = "shell" ]; then
    local command="bash -c '$*'"
  else
    local command="$bin $*"
  fi
  if [ "$(uname -m)" = 'arm64' ] || [ "$(uname -m)" = 'aarch64' ]; then
    local image="nixery.dev/arm64/$packages"
  else
    local image="nixery.dev/$packages"
  fi
  eval nerdctl run --init -it --rm \
    --volume "$PWD:$PWD":rro,rprivate \
    --workdir "$PWD" \
    "$image" "$command"
}

### Ad-hoc binaries via Nix ####################################################

# file explorers
alias yazi='n yazi/ffmpegthumbnailer/unar/jq/poppler/fd/ripgrep/fzf/zoxide/vim'

# servers
alias miniserve='PORT=8000 n miniserve --hide-version-footer --port \$PORT $PWD'

# cloud
alias azcopy='n shell/azure-storage-azcopy azcopy'

# appsec
alias grype='n grype'
alias syft='n syft'

# secrets
alias trufflehog='n trufflehog/git'

# sast
alias kubescape='n kubescape'
alias terrascan='n terrascan'

# database clients
alias mysql='n shell/mariadb mysql'
alias psql='n shell/postgresql psql'

# decoders
alias fq='n fq'
alias hexyl='n hexyl'
alias lemmeknow='n lemmeknow'

# development
alias devenv='n devenv' # https://devenv.sh/
alias difft='n shell/difftastic difft'
alias grex='n grex'
alias pcalc='n pcalc'
alias tokei='n tokei'

# load testing
alias k6='n k6'
alias oha='n oha'

# network
alias dog='n shell/dogdns dog'
alias gping='n gping/iputils'

# port scanners
alias naabu='n naabu'
alias nmap='n nmap'
alias rustscan='n rustscan'

# osint
alias maigret='n maigret'

# enumeration
alias amass='n amass'
alias feroxbuster='n feroxbuster'
alias gobuster='n gobuster'
alias katana='n katana'

# dns scanners
alias dnstwist='n dnstwist'
alias subfinder='n subfinder'

# web scanners
alias ffuf='n ffuf'
alias nikto='n nikto'
alias nuclei='n nuclei'
alias wapiti='n wapiti'

# xss scanners
alias dalfox='n dalfox'

# pentesting
alias msfconsole='n shell/metasploit msfconsole'
alias sqlmap='n sqlmap'

# password recovery
alias hashcat='n hashcat'
alias hydra='n shell/thc-hydra hydra'
