#!/bin/sh

# configent (https://github.com/raas-dev/configent)
# One command automated macOS/Linux laptop/VM/container bootstrapper.
#
# Copyright(C) 2016- Anssi SyrjÃ¤salo (http://a.syrjasalo.com)
# Licensed under GNU Lesser General Public License v3 (LGPL-3.0).

trap "printf '\nCaught ^C from user - exiting now\n' ; exit 130" INT

this_path=$(cd "$(dirname "$0")" && pwd)
bin_path="$this_path/bin"

if [ "$(uname -s)" = 'Darwin' ]; then
  "$bin_path/install_apps_macos"
  if [ "$CASKS" != 'false' ]; then
    "$bin_path/install_apps_cask"
  else
    printf "CASKS=false and on macOS, won't install casks.\n"
  fi
elif [ "$(uname -s)" = 'Linux' ]; then
  # zypper is aliased as apt-get, thus it has to come before real apt-get!
  if command -v zypper >/dev/null; then
    "$bin_path/install_apps_zypper"
  elif command -v apt-get >/dev/null; then
    "$bin_path/install_apps_apt"
    if [ "$ROOTFUL_DOCKER" = 'true' ] || [ -S "/var/run/docker.sock" ]; then
      "$bin_path/install_docker"
    else
      "$bin_path/install_docker_rootless"
    fi
  elif command -v dnf >/dev/null; then
    "$bin_path/install_apps_yum"
  elif command -v pacman >/dev/null; then
    "$bin_path/install_apps_pacman"
  elif command -v apk >/dev/null; then
    "$bin_path/install_apps_apk"
    #printf "Snap is not available on Alpine Linux, SNAPS=false forced.\n"
    #export SNAPS="false"
  fi
  #if [ "$SNAPS" != 'false' ]; then
  #  "$bin_path/install_apps_snap"
  #else
  #  printf "SNAPS=false and on Linux, won't install snaps.\n"
  #fi
  if [ "$FLATPAKS" != 'false' ]; then
    "$bin_path/install_apps_flatpak"
  else
    printf "FLATPAKS=false and on Linux, won't install flatpaks.\n"
  fi
else
  printf "\nError: Neither macOS nor apt, yum, zypper, pacman or apk present.\n"
  exit 1
fi

# installs Zsh plugins
# prompts to set Zsh as the default shell
# pass NONINTERACTIVE=true to skip (set by bootstrap)

"$bin_path/install_zsh"

# install or update mise, it is used by most of the succeeding install scripts
export PATH="$HOME/.local/bin:$PATH"
if command -v mise >/dev/null; then
  mise self-update --yes
else
  curl https://mise.run | sh
fi
mise install usage

# install language SDKs
"$bin_path/install_rust"
"$bin_path/install_go"
"$bin_path/install_nodejs"
"$bin_path/install_python"
"$bin_path/install_dotnet"
#"$bin_path/install_bun"
#"$bin_path/install_ruby"
#"$bin_path/install_java"
#"$bin_path/install_haskell"

# install jq
"$bin_path/install_jq"

# install GitHub CLI
"$bin_path/install_github"

# install Vim plugins
"$bin_path/install_vim"

# install Neovim and Lazyvim
"$bin_path/install_neovim"

# install tmux, tpm and tmux plugins
"$bin_path/install_tmux"

# install Ollama
"$bin_path/install_ollama"

# install static analysis tools
"$bin_path/install_linters"

# install application security tools such as vulnerability scanners
#"$bin_path/install_appsec"

# install cloud development tools
"$bin_path/install_aws"
"$bin_path/install_azure"
#"$bin_path/install_gcloud"
#"$bin_path/install_terraform"
#"$bin_path/install_k8sdev"
#"$bin_path/install_cloudflare"
#"$bin_path/install_flyctl"

# install Lima
"$bin_path/install_lima"

# copy ui/fonts/** to user's fonts path
"$bin_path/install_fonts"
